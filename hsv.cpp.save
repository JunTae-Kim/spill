#include <opencv2/opencv.hpp>
#include <iostream>
#include <raspicam/raspicam_cv.h>
#include <opencv/cv.hpp>
#include <opencv2/highgui.hpp>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <wiringPi.h>
#include <softPwm.h>

using namespace cv;
using namespace std;

int main()
{
	int64 t1, t2;
	int width = 320;
	int height = 240;

	int LowH1 = 170;
	int HighH1 = 179;		//red

	int LowH2 = 24;
	int HighH2 = 33;		//yellow

	int LowH3 = 58;
	int HighH3 = 72;		//green

	int LowS = 50;
	int HighS = 255;

	int LowV = 0;
	int HighV = 255;

	//cvCreateTrackbar("LowH", "setting", &LowH, 179);
	//cvCreateTrackbar("HighH", "setting", &HighH, 179);

	//cvCreateTrackbar("LowS", "setting", &LowS, 255);
	//cvCreateTrackbar("HighS", "setting", &HighS, 255);

	//cvCreateTrackbar("LowV", "setting", &LowV, 255);
	//cvCreateTrackbar("HighV", "setting", &HighV, 255);

	Size framesize(width, height);

	raspicam::RaspiCam_Cv cam;

	cam.set(CV_CAP_PROP_FORMAT, CV_8UC3);
	cam.set(CV_CAP_PROP_FRAME_WIDTH, width);
	cam.set(CV_CAP_PROP_FRAME_HEIGHT, height);

	if (!cam.open()) {
		cerr << "Camera open failed!" << endl;
		return -1;
	}	

	if (wiringPiSetup() == -1) return 1; //wiringPi error


	Mat img_input, img_hsv, img_binary1, img_binary2, img_binary3, CUTimage;


	/* ROI image end */

	bool do_flip = false;

	vector<Vec2f> lines;

	while (1) {
		t1 = getTickCount();

		cam.grab();
		cam.retrieve(img_input);

		if (do_flip)
			flip(img_input, img_input, -1);

		CUTimage = img_input(Range(60,180), Range(80,240));
		resize(CUTimage, CUTimage, Size(0,0), 2, 2);

		cvtColor(CUTimage, img_hsv, COLOR_BGR2HSV);

		inRange(img_hsv, Scalar(LowH1, LowS, LowV), Scalar(HighH1, HighS, HighV), img_binary1);
		inRange(img_hsv, Scalar(LowH2, LowS, LowV), Scalar(HighH2, HighS, HighV), img_binary2);
		inRange(img_hsv, Scalar(LowH3, LowS, LowV), Scalar(HighH3, HighS, HighV), img_binary3);

		erode(img_binary1, img_binary1, getStructuringElement(MORPH_ELLIPSE, Size(5,5)));
		dilate(img_binary1, img_binary1, getStructuringElement(MORPH_ELLIPSE, Size(5,5)));

		dilate(img_binary1, img_binary1, getStructuringElement(MORPH_ELLIPSE, Size(5,5)));
		erode(img_binary1, img_binary1, getStructuringElement(MORPH_ELLIPSE, Size(5,5)));

		erode(img_binary2, img_binary2, getStructuringElement(MORPH_ELLIPSE, Size(5,5)));
		dilate(img_binary2, img_binary2, getStructuringElement(MORPH_ELLIPSE, Size(5,5)));

		dilate(img_binary2, img_binary2, getStructuringElement(MORPH_ELLIPSE, Size(5,5)));
		erode(img_binary2, img_binary2, getStructuringElement(MORPH_ELLIPSE, Size(5,5)));


		erode(img_binary3, img_binary3, getStructuringElement(MORPH_ELLIPSE, Size(5,5)));
		dilate(img_binary3, img_binary3, getStructuringElement(MORPH_ELLIPSE, Size(5,5)));

		dilate(img_binary3, img_binary3, getStructuringElement(MORPH_ELLIPSE, Size(5,5)));
		erode(img_binary3, img_binary3, getStructuringElement(MORPH_ELLIPSE, Size(5,5)));

		Mat img_labels, stats, centroids;
		int numOfLables = connectedComponentsWithStats(img_binary1, img_labels, stats, centroids, 8, CV_32S);

		int max = , idx=0;
		for (int j = 1; j < numOfLables; j++){
			int area = stats.at<int>(j, CC_STAT_AREA);
			if(max < area)
			{
				max = area;
				idx = j;
			}
		}

		int left = stats.at<int>(idx, CC_STAT_LEFT);
		int top = stats.at<int>(idx, CC_STAT_TOP);
		int width = stats.at<int>(idx, CC_STAT_WIDTH);
		int height = stats.at<int>(idx, CC_STAT_HEIGHT);



		rectangle(CUTimage, Point(left,top), Point(left+width,top+height), Scalar(0,0,255),2);

		numOfLables = connectedComponentsWithStats(img_binary2, img_labels, stats, centroids, 8, CV_32S);

		max = -1, idx=0;
		for (int j = 1; j < numOfLables; j++){
			int area = stats.at<int>(j, CC_STAT_AREA);
			if(max < area)
			{
				max = area;
				idx = j;
			}
		}

		left = stats.at<int>(idx, CC_STAT_LEFT);
		top = stats.at<int>(idx, CC_STAT_TOP);
		width = stats.at<int>(idx, CC_STAT_WIDTH);
		height = stats.at<int>(idx, CC_STAT_HEIGHT);



		rectangle(CUTimage, Point(left,top), Point(left+width,top+height), Scalar(0,255,255),2);

		numOfLables = connectedComponentsWithStats(img_binary3, img_labels, stats, centroids, 8, CV_32S);

		max = -1, idx=0;
		for (int j = 1; j < numOfLables; j++){
			int area = stats.at<int>(j, CC_STAT_AREA);
			if(max < area)
			{
				max = area;
				idx = j;
			}
		}

		left = stats.at<int>(idx, CC_STAT_LEFT);
		top = stats.at<int>(idx, CC_STAT_TOP);
		width = stats.at<int>(idx, CC_STAT_WIDTH);
		height = stats.at<int>(idx, CC_STAT_HEIGHT);



		rectangle(CUTimage, Point(left,top), Point(left+width,top+height), Scalar(0,255,0),2);

		imshow("red", img_binary1);
		imshow("yellow", img_binary2);
		imshow("green", img_binary3);
		imshow("input image", img_input);
		imshow("multi", CUTimage);


		t2 = getTickCount();
		cout << "It took " << (t2 - t1) * 1000 / getTickFrequency() << " ms." << endl;

		int k = waitKey(1);
		if (k == 27)
			break;
		else if (k == 'f' || k == 'F')
			do_flip = !do_flip;

	}

	cam.release();
	destroyAllWindows();

	return 0;
}
